<?php
/** * @file
 * The scs_payment.module provide a payment method which admin could use for credit card payment.
 *
 */

define('SCS_PAYMENT_PENDING', 'Pending');
define('SCS_PAYMENT_APPROVED', 'Approved');
define('SCS_PAYMENT_DECLINED', 'Declined');

const SCS_TOKEN_LIFETIME = 900; //The token lifetime, e.g. for how many seconds they are valid.

function scs_payment_update_7000() {
    db_update('system')
        ->fields(array('weight' => 1))
        ->condition('name', 'scs_payment', '=')
        ->execute();
}


/**
 * Implements hook_menu().
 */
function scs_payment_menu() {
  $items = array();

  $items['scs_payment/failed'] = array(
    'title' => 'SCS Payment Was Declined',
    'page callback' => 'scs_payment_failed',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );


  $items['scs_payment/return'] = array(
    'title' => 'SCS Payment Checkout return url',
    'page callback' => 'scs_payment_return',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['scs_payment/confirmation/%entity_object/%/%'] = array(
    'title' => 'Confirmation Page',
    'load arguments' => array('payment'),
    'page callback' => 'scs_payment_confirmation',
    'page arguments' => array(2, 3, 4),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * This hook use to handle the customer return from the SCS payment with Cancelled.
 */
function scs_payment_menu_alter(&$items) {
  if (isset($items['node/%node/webform-continue/%webform_menu_submission/%'])) {
    $items['node/%/webform-continue/%/%']['page callback'] = 'scs_payment_status_message';
    $items['node/%/webform-continue/%/%']['access callback'] = 'scs_payment_message_webform_continue';
    $items['node/%/webform-continue/%/%']['page arguments'] = array(1, 3, 4);
  }
}

/**
 * could use this function later on to fix the access call back if need base on the requirement.
 */
function scs_payment_message_webform_continue() {
  return true;
}

function scs_payment_status_message($nid, $sid, $page_num) {
  module_load_include('inc', 'webform', 'includes/webform.submissions');
  module_load_include('module', 'webform', 'webform.module');
  $submission = webform_get_submission($nid, $sid);

  if (is_object($submission)) {
    //get the payment pid base on the submission id n nid.
    $pid = get_pid_by_sid($nid, $sid);

    //get the payment status
    $result = db_select('payment_status_item')
      ->fields('payment_status_item')
      ->condition('pid', $pid)
      ->orderBy('psiid', 'DESC')
      ->range(0, 1)
      ->execute();
    $status_items = array();
    $payment_status_item = $result->fetchObject();
    $status = $payment_status_item->status;

    //get the payment method id
    $query = db_select('payment', 'p')
      ->condition('p.pid', $pid, '=')
      ->fields('p', array('pmid'));

    $pmid = $query->execute()->fetchObject();

    $message = '';
    if($status == 'payment_status_pending'){
      if (isset($pmid->pmid) && !empty($pmid->pmid)) {
        $url = drupal_get_path_alias('node/' . $nid);
        $message = variable_get('scs_pending_message_' . $pmid->pmid, 'Thank you.  Your payment is processing.');
        $message = str_replace('[nid]', '/' . $url, $message);
        $message = webform_replace_tokens($message,NULL ,$submission, NULL, FALSE );
      }
    }elseif($status == 'payment_status_failed'){
      //cancelled message
      if (isset($pmid->pmid) && !empty($pmid->pmid)) {
        $url = drupal_get_path_alias('node/' . $nid);
        $message = variable_get('scs_cancelled_message_' . $pmid->pmid, '');
        $message = str_replace('[nid]', '/' . $url, $message);
        $message = webform_replace_tokens($message,NULL ,$submission, NULL, FALSE );
      }
    }else{
      $message = 'Thank you.  Your payment is ' . $status;
      Watchdog('SCS Payment', 'Unknown payment status: '. $status);
    }
    return $message;
  }
}

/**
 * Set Failed SCS Payment method
 */
function scs_payment_failed() {
  return 'The payment was declined.';
}

/**
 * Sets the page title dynamically based on the purchase description.
 * @TODO: Is this title the best fit?
 */
function scs_payment_title($payment) {
  drupal_set_title($payment->description);
}


/**
 * We could not alter the menu link from webform node/%webform_menu/done so we will have to use
 * this hook to check for one time submission token. If the Token is Expired or not exist in database,
 * then we will redirect anonymous user to node/sid/done?sid without token value.
 */
function scs_payment_webform_submission_load(&$submissions) {
    $sid = !empty($_GET['sid']) ? $_GET['sid'] : NULL;
    if(!empty($submissions[$sid]->payments)) {
        //extra one time check
        $hash_query = !empty($_GET['token']) ? $_GET['token'] : NULL;
        if (!empty($hash_query) && !empty($sid)) {
            $one_time_token = load_token($hash_query, $submissions[$sid]->nid);
            //redirect if the token time has been expired or token does not exist in database
            if ($one_time_token == FALSE || $one_time_token == 'EXPIRED') {
                $options = array();
                if ($submissions) {
                    $options['query']['sid'] = $submissions[$sid]->sid;
                }
                //commenting out goto because this function is broken.
                //drupal_goto('node/' . $submissions[$sid]->nid . '/done', $options);
            }
        }
    }
}

/**
 * This hook_url_outbound_alter only alter the link for webform
 */
function scs_payment_url_outbound_alter(&$path, &$options, $original_path) {
  //Only add in the query token if the query in the URL contains sid, which mean the webform submission id.
  if (isset($options['query']) && isset($options['query']['sid'])) {
    if ($hash = scs_payment_webform_hash()) {
      $options['query']['token'] = $hash;
    }
  }
}

/**
 * Use this function to set the token so the anonymous user could view the form submission
 */
function scs_payment_webform_hash($value = '') {
  $hash = &drupal_static(__FUNCTION__);
  if (!empty($value)) {
    $hash = $value;
  }

  return $hash;

}


/**
 * Return callback.
 */
function scs_payment_return() {
  global $base_url, $base_path;
  //Security Concern, right now only orderNumber is the one we could use to get the payment information.
  $paymentstatus = isset($_POST['paymentStatus']) ? $_POST['paymentStatus'] : 0;
  $authorizationcode = isset($_POST['authorizationCode']) ? $_POST['authorizationCode'] : NULL;
  $ordernumber = isset($_POST['orderNumber']) ? $_POST['orderNumber'] : 0;
  $echeck = isset($_POST['ACHType']) ? TRUE : FALSE;
  watchdog('SCS Payment Post', '<pre>' . print_r($_POST, TRUE) . '</pre>');
  watchdog('SCS header url', $base_url . $base_path . 'scs_payment/confirmation/' . $ordernumber);
  watchdog('SCS E-Check',  'Echeck:'. $echeck);
  if ($paymentstatus == '1' && $authorizationcode != '' && $ordernumber != 0 ) {
    module_load_include('inc', 'webform', 'includes/webform.submissions');
    //Redirect to Confirmation Page
    $md5_pid = md5($ordernumber . 'extra_string');
    //update authorization code
    //need to load the payment object base on the order number
    $payment = entity_load_single('payment', $ordernumber);
    $submission = webform_get_submission($payment->context_data['nid'], $payment->context_data['sid']);
    $node = node_load($submission->nid);
    //need to insert/update the $authorizationCode into the "scs_authorization_code".
    $scs_authorization_code = '';
    foreach ($node->webform['components'] as $key => $component) {
      //This one "scs_authorization_code" is custom, so make sure to have it available
      if ($component['form_key'] == 'scs_authorization_code') {
        $scs_authorization_code = $component['cid'];
        $submission->data[$scs_authorization_code][0] = $authorizationcode;
        //finish webform submission
        $submission->is_draft = 0;
        //update scs_authorization_code field with the $authorizationCode. this will later on use for the Permit id for SCS payment
        $update = webform_submission_update($node, $submission);
      }
      if($component['form_key'] == 'invoice_nid') {
        $invoice_nid_cid = $component['cid'];
        $invoice_nid = $submission->data[$invoice_nid_cid][0];
        $invoice = node_load($invoice_nid);
        $wrapper = entity_metadata_wrapper('node', $invoice);
        if ($echeck) {
          $wrapper->field_invoice_status->set('pending_clearance');
        } else {
          $wrapper->field_invoice_status->set('paid');
          $wrapper->field_invoice_lock_this_node->set(TRUE);
        }
        $wrapper->save();
      }
    }
    if ($echeck) {
      $payment->setStatus(new PaymentStatusItem(PAYMENT_STATUS_PENDING));
    } else {
      $payment->setStatus(new PaymentStatusItem(PAYMENT_STATUS_SUCCESS));
    }
      $payment->finish();
      // @TODO: code is commented in the Payment Method Select module to prevent header standard confirmation page.
      // @TODO:  commented line at 132 of WebformPaymentContext.php
      // Sends HTTP 200 Location response to the SCS Payment Server.
      // Server retrieves that value, and then uses it to send them to this URL
      header("Location: " . $base_url . $base_path . 'scs_payment/confirmation/' . $ordernumber . '/' . $md5_pid . '/' . $authorizationcode, TRUE, 200);

  } else {
    //Failed Payment - set status to failed and redirect to the failed page.
    $payment = entity_load_single('payment', $ordernumber);
    $payment->setStatus(new PaymentStatusItem('payment_status_failed'));
    $payment->finish();
    watchdog('SCS Payment failed', 'payment failed for order : ' . $ordernumber);
    //drupal_goto( $base_url . $base_path . 'scs_payment/failed');
  }
  exit;
}


/**
 * Confirmation page that the return URL will send the user too.
 * The user will not get here unless there is a valid payment entity
 * and a valid token for security measures.
 *
 * @$payment is a Payment Object
 *
 */
function scs_payment_confirmation($payment, $md5_pid, $authorizationcode) {
  global $user, $base_url, $base_path;
  if ($md5_pid == md5($payment->pid . 'extra_string')) {
    $submission = webform_get_submission($payment->context_data['nid'], $payment->context_data['sid']);

    //pass in the sid to the view pdf to generate the file, and may be nid
    $hash = webform_get_submission_access_token($submission);
    //check for the 1 time token, if not in the database, then generate one,
    $one_time_token = load_token($hash, $payment->context_data['nid']);
    if ($one_time_token == FALSE) {
      $one_time_token = create_token($payment->pid, $hash);
    }
    //Set the token/hash so later on we could use it for anonymous user to view the confirmation page
    scs_payment_webform_hash($hash);
    $options = array();
    $options['query']['sid'] = $payment->context_data['sid'];
    $options['query']['token'] = $one_time_token;
    drupal_goto('node/' . $payment->context_data['nid'] . '/done', $options);
  } else {
    drupal_goto($base_url . $base_path . 'scs_payment/failed');
  }
}

/**
 * Implementation hook_access().
 */
function scs_return_access() {
  return TRUE;
}

/**
 * Processes the webform confirmation page.
 */
function scs_payment_webform_confirmation($payment) {
  $node = node_load($payment->context_data['nid']);
  $node->payment = $payment;
  return _webform_confirmation($node);
}

function scs_payment_commerce_confirmation($payment) {
  return drupal_goto('checkout');
}

function scs_payment_payment_status_info() {
  return array(
    new PaymentStatusInfo(array(
      'description' => t('Pending approval'),
      'status' => SCS_PAYMENT_PENDING,
      'title' => t('Pending (waiting for SCS approval)'),
    )),
    new PaymentStatusInfo(array(
      'description' => t('Approved'),
      'status' => SCS_PAYMENT_APPROVED,
      'title' => t('Approved (approved by SCS)'),
    )),
    new PaymentStatusInfo(array(
      'description' => t('Declined'),
      'status' => SCS_PAYMENT_DECLINED,
      'title' => t('Declined (Declined by SCS)'),
    )),
  );
}


//Need to use this hook below to get the new payment method

function scs_payment_payment_method_controller_info() {
  return array(
    'PaymentMethodSCSController',
  );
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function scs_payment_payment_method_insert(PaymentMethod $payment_method) {
  if ($payment_method->controller->name == 'PaymentMethodSCSController') {
    $values = $payment_method->controller_data += $payment_method->controller->controller_data_defaults;
    $values['pmid'] = $payment_method->pmid;
    drupal_write_record('scs_payment_method', $values);
  }
}


/**
 * Implements hook_entity_load().
 */
function scs_payment_entity_load(array $entities, $entity_type) {
  if ($entity_type == 'payment_method') {
    $pmids = array();
    foreach ($entities as $payment_method) {
      if ($payment_method->controller->name == 'PaymentMethodSCSController') {
        $pmids[] = $payment_method->pmid;
      }
    }
    if ($pmids) {
      $query = db_select('scs_payment_method')
        ->fields('scs_payment_method')
        ->condition('pmid', $pmids);
      $result = $query->execute();
      while ($data = $result->fetchAssoc()) {
        $payment_method = $entities[$data['pmid']];
        $payment_method->controller_data = (array)$data;
        $payment_method->controller_data['debug'] = (int)$payment_method->controller_data['debug'];
        unset($payment_method->controller_data['pmid']);
      }
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function scs_payment_payment_method_update(PaymentMethod $payment_method) {
  if ($payment_method->controller->name == 'PaymentMethodSCSController') {
    $values = $payment_method->controller_data += $payment_method->controller->controller_data_defaults;
    $values['pmid'] = $payment_method->pmid;
    drupal_write_record('scs_payment_method', $values, 'pmid');
  }
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 */
function scs_payment_payment_method_delete($entity) {
  if ($entity->controller->name == 'PaymentMethodSCSController') {
    db_delete('scs_payment_method')
      ->condition('pmid', $entity->pmid)
      ->execute();
  }
}

/**
 * Form build callback: implements
 * PaymentMethodController::payment_method_configuration_form_elements_callback.
 */
function scs_payment_payment_method_configuration_form_elements(array $form, array &$form_state) {
  $payment_method = $form_state['payment_method'];
  $controller = $payment_method->controller;
  $controller_data = $payment_method->controller_data + $controller->controller_data_defaults;
  $form = array();

  $form['merchant_information'] = array(
    '#title' => t('Merchant Information'),
    '#type' => 'fieldset',
  );
  $form['merchant_information']['name'] = array(
    '#default_value' => $controller_data['name'],
    '#title' => t('Merchant Name'),
    '#required' => TRUE,
    '#type' => 'textfield',
  );
  $form['merchant_information']['number'] = array(
    '#default_value' => $controller_data['number'],
    '#description' => t('Merchant Number'),
    '#title' => t('Merchant Number'),
    '#required' => TRUE,
    '#type' => 'textfield',
  );
  $form['merchant_information']['service'] = array(
    '#default_value' => $controller_data['service'],
    '#required' => TRUE,
    '#title' => t('Service'),
    '#type' => 'textfield',
  );
  $form['merchant_information']['gao_batch_agency'] = array(
    '#default_value' => $controller_data['gao_batch_agency'],
    '#required' => TRUE,
    '#title' => t('GAO Batch Agency'),
    '#type' => 'textfield',
  );
  $form['merchant_information']['gao_doc_no_agency'] = array(
    '#default_value' => $controller_data['gao_doc_no_agency'],
    '#required' => TRUE,
    '#title' => t('GAO Doc No Agency'),
    '#type' => 'textfield',
  );
  $form['merchant_information']['server'] = array(
    '#default_value' => $controller_data['server'],
    '#options' => array(
      0 => ('Production'),
      1 => ('Sandbox'),
    ),
    '#title' => t('Server'),
    '#type' => 'radios',
  );

  $form['merchant_information']['debug'] = array(
    '#default_value' => $controller_data['debug'],
    '#type' => 'checkbox',
    '#title' => t('Turn on Debug Mode'),
  );

  //Cancel message
  $form['scs_cancel'] = array(
    '#title' => t('SCS Cancellation Message'),
    '#type' => 'fieldset',
  );

  //Cancel message
  $form['scs_pending'] = array(
    '#title' => t('SCS Pending Message'),
    '#type' => 'fieldset',
  );


  $pmid = '';

  if (isset($form_state['build_info']['args'][0]->pmid) && $form_state['build_info']['args'][0]->pmid != '0') {
    $pmid = $form_state['build_info']['args'][0]->pmid;
  }
  //need to get the nid for the form
  $form['scs_cancel']['message'] = array(
    '#default_value' => variable_get('scs_cancelled_message_' . $pmid, 'Your order has been canceled.'),
    '#title' => t('To create a link back to the form, use this token "[nid]". Example "please go &lt;a href="[nid]"&gt;here&lt;/a&gt;'),
    '#description' => t('To create a link back to the form, use this token "[nid]". Example "please go &lt;a href="[nid]"&gt;here&lt;/a&gt;'),
    '#required' => TRUE,
    '#type' => 'textarea',
  );

  $form['scs_pending']['message'] = array(
    '#default_value' => variable_get('scs_pending_message_' . $pmid, 'Thank you.  Your payment is processing.'),
    '#title' => t('To create a link back to the form, use this token "[nid]". Example "please go &lt;a href="[nid]"&gt;here&lt;/a&gt;'),
    '#description' => t('To create a link back to the form, use this token "[nid]". Example "please go &lt;a href="[nid]"&gt;here&lt;/a&gt;'),
    '#required' => TRUE,
    '#type' => 'textarea',
  );

  return $form;

}

/**
 * Implements form validate callback for
 * paypal_payment_ec_payment_method_configuration_form_elements().
 */
function scs_payment_payment_method_configuration_form_elements_validate(array $form, array &$form_state) {
  $values = drupal_array_get_nested_value($form_state['values'], $form['#parents']);

  $controller_data = &$form_state['payment_method']->controller_data;
  $controller_data['name'] = $values['merchant_information']['name'];
  $controller_data['number'] = $values['merchant_information']['number'];
  $controller_data['service'] = $values['merchant_information']['service'];
  $controller_data['gao_batch_agency'] = $values['merchant_information']['gao_batch_agency'];
  $controller_data['gao_doc_no_agency'] = $values['merchant_information']['gao_doc_no_agency'];
  //$controller_data['gao_agency'] = $values['merchant_information']['gao_agency'];
  $controller_data['server'] = $values['merchant_information']['server'];
  $controller_data['debug'] = $values['merchant_information']['debug'];
  //need to validate if any
  //do variable_set for message
  $message = $values['scs_cancel']['message'];
  $pending_message = $values['scs_pending']['message'];
  if (isset($form_state['build_info']['args'][0]->pmid) && !empty($message)) {
    $pmid = $form_state['build_info']['args'][0]->pmid;
    variable_set('scs_cancelled_message_' . $pmid, $message);
  }
  if (isset($form_state['build_info']['args'][0]->pmid) && !empty($pending_message)) {
    $pmid = $form_state['build_info']['args'][0]->pmid;
    variable_set('scs_pending_message_' . $pmid, $pending_message);
  }
}


/**
* Returns token string, or Expired string, or False
*/
function load_token($token, $nid) {
  $query = db_select('scs_payment_token', 't')
    ->condition('t.token', $token, '=')
    ->fields('t', array('token', 'created'));

  $token = $query->execute()->fetchObject();

  if (isset($token->token) && !empty($token->token)) {
    //Get token life time
    $count_query = db_select('webform_temp_file_expired_config', 't')
      ->condition('t.nid', $nid, '=')
      ->fields('t', array('count'));

    $count = $count_query->execute()->fetchObject();

    $seconds = 900;
    if (isset($count->count) && !empty($count->count) && $count->count != '0') {
      //convert minutes to seconds
      $seconds = (int)($count->count) * 60;
    }

    $created = (int)$token->created + (int)$seconds;
    if ((int)($created) > (int)REQUEST_TIME) {
      return $token->token;
    } else {
      return 'EXPIRED';
    }
  } else {
    return FALSE;
  }
}

/**
* Create token base on the webform Hash value, $pid == $sid. This is only use for webform token
*/
function create_token($pid, $hash) {
  $result = db_insert('scs_payment_token')// Table name no longer needs {}
  ->fields(array(
    'created' => REQUEST_TIME,
    'pid' => $pid,
    'token' => $hash,
  ))
    ->execute();

  return $result;
}


/**
 * hook to added in extra field to the line item.
 */
function scs_payment_element_info_alter(&$element) {
  if (isset($element['payment_line_item']) == TRUE) {
    $element['payment_line_item']['#process']['3'] = 'scs_payment_element_process_line_item';
    //$element['payment_line_item']['#element_validate'] = array('scs_payment_element_validate_line_item');
  }

}

/**
 * Callback function set in hook_element_info_alter() hook
 */
function scs_payment_element_process_line_item(array $element, array &$form_state, array $form) {
  variable_set('temp_machine_names', array());
  module_load_include('inc', 'webform', 'includes/webform.components');
  $node = webform_paymethod_select_get_node($form, $form_state);
  drupal_add_css(drupal_get_path('module', 'scs_payment') . '/css/scs_payment_line_item.css');
  $form_builder = isset($form_state['payment_line_item_other_components']);
  if ($form_builder) {
    $other_components = $form_state['payment_line_item_other_components'];
  } else {
    $other_components = webform_component_list($node, FALSE);
    foreach ($other_components as $cid => $component) {
      $other_components[$cid]=ltrim($component, '-');
      if ($node->webform['components'][$cid]['type'] == 'paymethod_select') {
        unset($other_components[$cid]);
      }
    }
  }
  $components_disabled = empty($other_components);
  if ($components_disabled) {
    $other_components = array('' => t('No available components'));
  }
  $parents = isset($element['#parents']) ? $element['#parents'] : array('extra', 'line_items', 'items');
  foreach ($element as $key => &$line_element) {
    if (strpos($key, 'container_') === 0) {
      $index = str_replace('container_', '', $key);
      $defaults = NULL;
      if (isset($element['#default_value'][$index]) == TRUE
        && is_object($element['#default_value'][$index]) == TRUE
      ) {
        $defaults = $element['#default_value'][$index];
      } else {
        $defaults = new Drupal\webform_paymethod_select\PaymethodLineItem(array(
          'amount' => '',
          'amount_source' => 'fixed',
          'quantity' => 1,
          'quantity_source' => 'fixed',
          'tax_rate' => 0,
        ));
      }

      if ($form_builder && is_numeric($defaults->amount_component)) {
        $defaults->amount_component = 'cid_' . $defaults->amount_component;
      }
      if ($form_builder && is_numeric($defaults->quantity_component)) {
            $defaults->quantity_component = 'cid_' . $defaults->quantity_component;
      }
      $radio_id = drupal_html_id('webform-paymethod-select-' . $key . '-amount-source');
      $quantity_radio_id = drupal_html_id('webform-paymethod-select-' . $key . '-quantity-source');
      $line_element['product_code_id'] = array(
        '#type' => 'textfield',
        '#title' => t('Product Code'),
        '#size' => '20',
        '#maxlength' => '50',
        '#required' => FALSE,
        '#default_value' => isset($defaults->product_code_id)? $defaults->product_code_id : '',
        '#wrapper_attributes' => array(
          'class' => array('webform-paymethod-select-amount-option'),
        ),
        '#weight' => -12,
      );

      $line_element['product_function'] = array(
        '#type' => 'textfield',
        '#title' => t('Function ID'),
        '#size' => '20',
        '#maxlength' => '20',
        '#required' => FALSE,
        '#default_value' => isset($defaults->product_function)? $defaults->product_function : '',
        '#wrapper_attributes' => array(
          'class' => array('webform-paymethod-select-amount-option'),
        ),
        '#weight' => -11,
      );

      // Added in accounting_profile and department_revenue_source base on client request.
      $line_element['product_accounting_profile'] = array(
        '#type' => 'textfield',
        '#title' => t('Accounting Profile'),
        '#size' => '20',
        '#maxlength' => '6',
        '#required' => FALSE,
        '#default_value' => (isset($defaults->product_accounting_profile) ? $defaults->product_accounting_profile : ''),
        '#wrapper_attributes' => array(
          'class' => array('webform-paymethod-select-amount-option'),
        ),
        '#weight' => -10,
      );

      $line_element['product_revenue_source'] = array(
        '#type' => 'textfield',
        '#title' => t('Product Revenue Source'),
        '#size' => '20',
        '#maxlength' => '20',
        '#required' => FALSE,
        '#default_value' => (isset($defaults->product_revenue_source) ? $defaults->product_revenue_source : ''),
        '#wrapper_attributes' => array(
          'class' => array('webform-paymethod-select-amount-option'),
        ),
        '#weight' => -9,
      );

      $line_element['product_department_revenue_source'] = array(
        '#type' => 'textfield',
        '#title' => t('Department Revenue Source'),
        '#size' => '20',
        '#maxlength' => '50',
        '#required' => FALSE,
        '#default_value' => (isset($defaults->product_department_revenue_source) ? $defaults->product_department_revenue_source : ''),
        '#wrapper_attributes' => array(
          'class' => array('webform-paymethod-select-amount-option'),
        ),
        '#weight' => -8,
      );

      $line_element['description'] = array(
        '#type' => 'textfield',
        '#title' => t('Description'),
        '#default_value' => (isset($defaults->description) ? $defaults->description : ''),
        '#required' => TRUE,
        '#maxlength' => 255,
        '#weight' => -7,
      );
      $line_element['name'] = array(
        '#type'          => 'machine_name',
        '#maxlength'     => '255',
        '#default_value' => $defaults->name,
        '#weight' => -6,
        '#machine_name' => array(
          'exists' => '_scs_payment_check_if_machine_name_exists',
          'source' => array_merge($element['#parents'], array('container_' . $index, 'description')),
        ),
      );

      $line_element['description']['#wrapper_attributes'] = array(
        'class' => array('webform-paymethod-select-line-item-description'),
      );

      $line_element['amount_component'] = array(
            '#type'          => 'select',
            '#title'         => t('Component'),
            '#title_display' => 'invisible',
            '#default_value' => $defaults->amount_component,
            '#options'       => $other_components,
            '#disabled'      => $components_disabled,
            '#required'      => FALSE,
            '#wrapper_attributes' => array(
                'class' => array('webform-paymethod-select-amount-option'),
            ),
            '#weight' => -2,
      );

      $line_element['tax_rate'] = array(
            '#type' => 'textfield',
            '#title' => t('Tax rate'),
            '#default_value' => isset($defaults->tax_rate)? $defaults->tax_rate * 100 : 0,
            '#size' => 5,
            '#field_suffix' => '%',
            '#required' => TRUE,
            '#weight' => -1,
      );

      $line_element['quantity_source'] = array(
            '#attributes'    => array('class' => array($quantity_radio_id)),
            '#title'         => t('Set fixed quantity'),
            '#type'          => 'radio',
            '#return_value'  => 'fixed',
            '#default_value' => isset($defaults->quantity_source) == 'fixed' ? 'fixed' : NULL,
            '#required'      => FALSE,
            '#parents'       => array_merge($parents, array($key, 'quantity_source')),
            '#weight' => -.9,
      );

      $line_element['quantity'] = array(
            '#type'          => 'textfield',
            '#title'         => t('Quantity'),
            '#size'          => '20',
            '#maxlength'     => '20',
            '#required'      => FALSE,
            '#default_value' => $defaults->quantity,
            '#wrapper_attributes' => array(
                'class' => array('webform-paymethod-select-quantity-option'),
            ),
            '#states'        => array(
                'disabled' => array(".$quantity_radio_id" => array('value' => 'component')),
            ),
            '#weight' => -.8,
      );

      $line_element['quantity_via_component'] = array(
            '#attributes'    => array('class' => array($quantity_radio_id)),
            '#title'         => t('Select the component from which to read the quantity'),
            '#type'          => 'radio',
            '#return_value'  => 'component',
            '#default_value' => isset($defaults->quantity_source)&& $defaults->quantity_source == 'component'?  TRUE : FALSE,
            '#required'      => FALSE,
            '#parents'       => array_merge($parents, array($key, 'quantity_source')),
            '#weight' => -.7,

      );

      $line_element['quantity_component'] = array(
            '#type'          => 'select',
            '#title'         => t('Component'),
            '#title_display' => 'invisible',
            '#default_value' => isset($defaults->quantity_component)? $defaults->quantity_component: NULL ,
            '#options'       => $other_components,
            '#disabled'      => $components_disabled,
            '#required'      =>  FALSE,
            '#wrapper_attributes' => array(
                'class' => array('webform-paymethod-select-quantity-option'),
            ),
            '#weight' => -.6,
      );
      $line_element['remove_line_item'] = array(
        '#value' => t('Remove'),
        '#type' => 'submit',
        '#submit' => array('scs_payment_form_remove_line_item_callback'),
        '#name' => $key,
      );
    }
  }
  return $element;
}

/**
 * ajax callback for removing selected line item
 */
function scs_payment_form_remove_line_item_callback(&$form, &$form_state){
  $key = $form_state['triggering_element']['#name'];
  $id = str_replace('container_', '', $key);
  $i = $id;
  array_splice($form['extra']['line_items']['items'], $id,1);
  array_splice($form_state['values']['extra']['line_items']['items'], $id, 1);
  webform_component_update($form_state['values']);

  return $form;
}


/**
 * Checking if the machine name has already been used.
 */
function _scs_payment_check_if_machine_name_exists($name) {
  $machine_names = array();
  $temp_machine_names = variable_get('temp_machine_names',array());
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'webform');
      $result = $query->execute();
     $nids = array_keys($result['node']);
  foreach ($nids as  $key => $nid) {
     $webform = node_load($nid);
      foreach ($webform->webform['components']  as $key => $component) {
          if ($component['type'] == 'paymethod_select') {
              foreach ($component['extra']['line_items'] as $key => $line_item) {
                  array_push($machine_names, $line_item->name);
              }
          }
      }
  }
  if(empty($machine_names) || (!in_array($name, $machine_names, TRUE)&& !in_array($name, $temp_machine_names, TRUE))) {
      array_push($temp_machine_names, $name);
      variable_set('temp_machine_names', $temp_machine_names);
    return FALSE;
  }
  return TRUE;
}

/**
 * Hook form alter
 * insert in extra settings for SCS payment base on client request
 * admin/config/services/payment/global
 */
function scs_payment_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == "payment_form_global_configuration") {
    $form['scs_url_information'] = array(
      '#title' => t('Config SCS url'),
      '#type' => 'fieldset',
    );
    $form['scs_url_information']['scs_prod_url'] = array(
      '#default_value' => variable_get('scs_prod_url', 'https://ptl.az.gov'),
      '#title' => t('SCS Prod url'),
      '#required' => TRUE,
      '#type' => 'textfield',
    );
    $form['scs_url_information']['scs_test_url'] = array(
      '#default_value' => variable_get('scs_test_url', 'https://az.stagingaz.gov'),
      '#title' => t('SCS Test url'),
      '#required' => TRUE,
      '#type' => 'textfield',
    );
  } elseif ($form_id == 'webform_component_edit_form' && $form['type']['#value']=='paymethod_select') {
    $form['wrapper'] = array(
      '#type' => 'markup',
      '#markup' => '<div id="scs-line-items" ></div>',
    );
    // Load our default values
    $pay_limits = variable_get('payment_limits_' . $form['nid']['#value'], array());

    // Attach css and js
    $form['#attached']['css'][] = drupal_get_path('module', 'scs_payment') . '/css/scs_payment_limits.css';
    $form['#attached']['js'][] = drupal_get_path('module', 'scs_payment') . '/js/scs_payment_limits_admin.js';

    $form['extra']['payment_limits'] = array(
      '#type' => 'fieldset',
      '#title' => t('Payment Availability Configuration'),
    );

    // Credit Card Settings
    $form['extra']['payment_limits']['cc_limit_type'] = array(
      '#prefix' => '<div class="payment-limits-group"><div class="payment-limits-group-name">Credit Card</div>',
      '#title' => t('Min/Max Setting'),
      '#type' => 'select',
      '#options' => array(
         '0' => t('Minimum Only'),
         '1' => t('Maximum Only'),
         '2' => t('Minimum and Maximum'),
         '3' => t('Do Not Use'),
         '4' => t('Always Use'),
       ),
      '#default_value' => isset($pay_limits['cc_limit_type']) ? $pay_limits['cc_limit_type'] : '4',
    );

    // Credit Card Minimum
    $form['extra']['payment_limits']['cc_payment_limits_min'] = array(
      '#title' => t('Minimum'),
      '#type' => 'textfield',
      '#default_value' => isset($pay_limits['cc_payment_limits_min'])
        ? scs_payment_limit_display($pay_limits['cc_payment_limits_min'])
        : '',
      '#size' => 20,
      '#prefix' => '<div class="limits-prefix limits-prefix-min"><span class="prefix">$</span>',
      '#element_validate' => array('scs_payment_validate_limit'),
      '#states' => array(
        'visible' => array(
          array(
            'select[name="extra[payment_limits][cc_limit_type]"]' => array('value' => '2'),
          ),
          array(
            'select[name="extra[payment_limits][cc_limit_type]"]' => array('value' => '0'),
          ),
        ),
        'required' => array(
          array(
            'select[name="extra[payment_limits][cc_limit_type]"]' => array('value' => '2'),
          ),
          array(
            'select[name="extra[payment_limits][cc_limit_type]"]' => array('value' => '0'),
          ),
        ),
      ),
      '#suffix' => '</div>',
    );

    // Credit Card Maximum
    $form['extra']['payment_limits']['cc_payment_limits_max'] = array(
      '#title' => t('Maximum'),
      '#type' => 'textfield',
      '#default_value' => isset($pay_limits['cc_payment_limits_max'])
        ? scs_payment_limit_display($pay_limits['cc_payment_limits_max'])
        : '',
      '#size' => 20,
      '#prefix' => '<div class="limits-prefix limits-prefix-max"><span class="prefix">$</span>',
      '#element_validate' => array('scs_payment_validate_limit'),
      '#states' => array(
        'visible' => array(
          array(
            'select[name="extra[payment_limits][cc_limit_type]"]' => array('value' => '2'),
          ),
          array(
            'select[name="extra[payment_limits][cc_limit_type]"]' => array('value' => '1'),
          ),
        ),
        'required' => array(
          array(
            'select[name="extra[payment_limits][cc_limit_type]"]' => array('value' => '2'),
          ),
          array(
            'select[name="extra[payment_limits][cc_limit_type]"]' => array('value' => '1'),
          ),
        ),
      ),
      '#suffix' => '</div></div>',
    );

    // ACH Settings
    $form['extra']['payment_limits']['ach_limit_type'] = array(
      '#prefix' => '<div class="payment-limits-group"><div class="payment-limits-group-name">Automatic Clearing House (ACH)</div>',
      '#title' => t('Min/Max Setting'),
      '#type' => 'select',
      '#options' => array(
         '0' => t('Minimum Only'),
         '1' => t('Maximum Only'),
         '2' => t('Minimum and Maximum'),
         '3' => t('Do Not Use'),
         '4' => t('Always Use'),
       ),
      '#default_value' => isset($pay_limits['ach_limit_type']) ? $pay_limits['ach_limit_type'] : '4',
    );

    // ACH Minimum
    $form['extra']['payment_limits']['ach_payment_limits_min'] = array(
      '#title' => t('Minimum'),
      '#type' => 'textfield',
      '#default_value' => isset($pay_limits['ach_payment_limits_min'])
        ? scs_payment_limit_display($pay_limits['ach_payment_limits_min'])
        : '',
      '#size' => 20,
      '#prefix' => '<div class="limits-prefix limits-prefix-min"><span class="prefix">$</span>',
      '#element_validate' => array('scs_payment_validate_limit'),
      '#states' => array(
        'visible' => array(
          array(
            'select[name="extra[payment_limits][ach_limit_type]"]' => array('value' => '2'),
          ),
          array(
            'select[name="extra[payment_limits][ach_limit_type]"]' => array('value' => '0'),
          ),
        ),
        'required' => array(
          array(
            'select[name="extra[payment_limits][ach_limit_type]"]' => array('value' => '2'),
          ),
          array(
            'select[name="extra[payment_limits][ach_limit_type]"]' => array('value' => '0'),
          ),
        ),
      ),
      '#suffix' => '</div>',
    );

    // ACH Maximum
    $form['extra']['payment_limits']['ach_payment_limits_max'] = array(
      '#title' => t('Maximum'),
      '#type' => 'textfield',
      '#default_value' => isset($pay_limits['ach_payment_limits_max'])
        ? scs_payment_limit_display($pay_limits['ach_payment_limits_max'])
        : '',
      '#size' => 20,
      '#prefix' => '<div class="limits-prefix limits-prefix-max"><span class="prefix">$</span>',
      '#element_validate' => array('scs_payment_validate_limit'),
      '#states' => array(
        'visible' => array(
          array(
            'select[name="extra[payment_limits][ach_limit_type]"]' => array('value' => '2'),
          ),
          array(
            'select[name="extra[payment_limits][ach_limit_type]"]' => array('value' => '1'),
          ),
        ),
        'required' => array(
          array(
            'select[name="extra[payment_limits][ach_limit_type]"]' => array('value' => '2'),
          ),
          array(
            'select[name="extra[payment_limits][ach_limit_type]"]' => array('value' => '1'),
          ),
        ),
      ),
      '#suffix' => '</div></div>',
    );

    $form['extra']['payment_notes'] = array(
      '#title' => t('Payment Notes'),
      '#required' => TRUE,
      '#type' => 'textarea',
      '#default_value' => scs_payment_webform_payment_notes_load($form['nid']['#value']),
    );

    // Add extra submit handler to save pay limit values in array
    $form['#submit'][] = "scs_payment_paymethod_select_extra_save_handler";
    array_unshift($form['#validate'],'scs_payment_webform_component_edit_form_validate' );
  }elseif($form_id == 'payment_form_standalone'){
    $payment = $form_state['payment'];
    $status_options = payment_status_options();
    unset($status_options['payment_status_new']);


    $form['payment_status'] = array(
      '#options' => $status_options,
      '#access' => !payment_status_is_or_has_ancestor($payment->getStatus()->status, PAYMENT_STATUS_NEW),
      '#type' => 'select',
      '#title' => t('Status'),
      '#default_value' => $payment->getStatus()->status,
      '#required' => TRUE,
      '#description' => t('Updating a payment status manually can disrupt automatic payment processing.') . (user_access('payment.payment_status.view') ? ' ' . l(t('Payment status overview.'), 'admin/config/services/payment/status') : ''),
    );

  }
}

function scs_payment_webform_component_edit_form_validate(&$form, &$form_state) {
  foreach ($form_state['values']['extra']['line_items']['items'] as $key => $line_item ) {
    if (($line_item->quantity_source == 'component') && ($line_item->quantity_component == '')) {
      form_set_error('Quantity Component Required', 'If the quantity component is selected, a valid field must be chosen from the webform.');
    }
    elseif (($line_item->amount_source == 'component') && ($line_item->amount_component == '')) {
      form_set_error('Amount Component Required', 'If the amount component is selected, a valid field must be chosen from the webform.');
    }
  }

  $limit_types = array(
    'cc_limit_type' => array(
      'abv' => 'cc',
      'name' => 'Credit Card'
    ),
    'ach_limit_type' => array(
      'abv' => 'ach',
      'name' => 'ACH'
    )
  );
  $pay_limits = $form_state['values']['extra']['payment_limits'];
  // Check for empty values based on the type of limit selected
  foreach ($pay_limits as $key => $value) {
    if (array_key_exists($key, $limit_types)) {
      // Minimum Only
      if ($value === '0' && $pay_limits[$limit_types[$key]['abv'] . '_payment_limits_min'] == '') {
        form_set_error('extra][payment_limits][' . $limit_types[$key]['abv'] . '_payment_limits_min', $limit_types[$key]['name'] . ' Minimum Required.');
      }

      // Maximum Only
      if ($value === '1' && $pay_limits[$limit_types[$key]['abv'] . '_payment_limits_max'] == '') {
        form_set_error('extra][payment_limits][' . $limit_types[$key]['abv'] . '_payment_limits_max', $limit_types[$key]['name'] . ' Maximum Required.');
      }

      // Minimum and Maximum
      if ($value === '2') {
        if ($pay_limits[$limit_types[$key]['abv'] . '_payment_limits_min'] == '') {
          form_set_error('extra][payment_limits][' . $limit_types[$key]['abv'] . '_payment_limits_min', $limit_types[$key]['name'] . ' Minimum Required.');
        }
        if ($pay_limits[$limit_types[$key]['abv'] . '_payment_limits_max'] == '') {
          form_set_error('extra][payment_limits][' . $limit_types[$key]['abv'] . '_payment_limits_max', $limit_types[$key]['name'] . ' Maximum Required.');
        }
        if ($pay_limits[$limit_types[$key]['abv'] . '_payment_limits_min'] >= $pay_limits[$limit_types[$key]['abv'] . '_payment_limits_max']) {
          // if min is greater or equal to the max
          form_set_error('extra][payment_limits][' . $limit_types[$key]['abv'] . '_payment_limits_min', $limit_types[$key]['name'] . ' Minimum cannot be greater than the Maximum.');
        }
      }
    }
  }
}

/**
 * Validates that the limit is a number and that it is saved as a float.
 *
 * @param $element
 * @param $form_state
 */
function scs_payment_validate_limit($element, &$form_state) {
  $value = str_replace(',', '', $element['#value']);
  if ($value == '') { // Required values are checked for in scs_payment_webform_component_edit_form_validate
    return;
  }
  if (!is_numeric($value)) { // Must be a number
    form_error($element, t('%name must be an number.', array(
      '%name' => $element['#title'],
    )));
  }
  else if ($value < 0) { // Must be positive or 0
    form_error($element, t('%name cannot be negative.', array(
      '%name' => $element['#title'],
    )));
  }
  else { // Save number as a float to make comparisons easier later
    $parents = $element['#array_parents'];
    $form_state['values'][$parents[0]][$parents[1]][$parents[2]] = floatval(number_format($value, 2, '.', ''));
  }
}

/**
 * Helper function to display the limit in the correct format.
 *
 * @param $num
 * @return string
 */
function scs_payment_limit_display($num) {
  return is_numeric($num) ? number_format($num, 2, '.', ',') : '';
}

/**
 * Save handler for the payment compontent. Saves the payment limit configurations to a variable.
 *
 * @param $form
 * @param $form_state
 */
function scs_payment_paymethod_select_extra_save_handler(&$form, &$form_state) {
  $payment_limits = array();
  foreach ($form_state['values']['extra']['payment_limits'] as $key => $value) {
    $payment_limits[$key] = $value;
  }
  variable_set('payment_limits_' . $form['nid']['#value'], $payment_limits);
}

/**
 * Returns paymentType value to be sent in the XML.
 *
 * @param $nid
 * @param $amount
 * @return string
 */
function scs_payment_type_load($nid, $amount) {
  $pay_limits = variable_get('payment_limits_' . $nid, array());
  if (!empty($pay_limits)) {
    $cc = scs_payment_limit_allowed($pay_limits['cc_limit_type'], $pay_limits['cc_payment_limits_min'], $pay_limits['cc_payment_limits_max'], $amount);
    $ach = scs_payment_limit_allowed($pay_limits['ach_limit_type'], $pay_limits['ach_payment_limits_min'], $pay_limits['ach_payment_limits_max'], $amount);
    if ($cc && $ach) {
      return 'ALL';
    }
    else if ($cc && !$ach) {
      return 'CC';
    }
    else if (!$cc && $ach) {
      return 'ACH';
    }
    else {
      return '';
    }
  }
  else { // By default use all payment methods
    return 'ALL';
  }
}

/**
 * Returns boolean whether the payment type is allowed based on the values passed in.
 *
 * @param $type
 * @param $min
 * @param $max
 * @param $amount
 * @return boolean
 */
function scs_payment_limit_allowed($type, $min, $max, $amount) {
  switch($type) {
    case '4': // Always Use
      return TRUE;

    case '3': // Do Not Use
      return FALSE;

    case '0': // Min Only
      return $amount < $min ?  FALSE :  TRUE;

    case '1': // Max Only
      return $amount > $max ?  FALSE :  TRUE;

    case '2': // Min and Max
      return $amount > $max ||  $amount < $min ?  FALSE :  TRUE;

    default: // Just in case
      return TRUE;
  }
}

/**
 * Implements hook_node_presave().
 *
 * If the quantity is configured to use a component, the value of the component is saved as the quantity.
 */
function scs_payment_webform_submission_presave($node, &$submission) {
    foreach ($node->webform['components'] as $key => $component) {
    if ($component['type'] == 'paymethod_select') {
        $component_quantity = FALSE;
        $valid_quantity = 0;
       foreach ($component['extra']['line_items'] as $key => $line_item) {
           //checking for a quantity component
            if (isset($line_item->quantity_source) && $line_item->quantity_source == 'component') {
                $component_quantity = TRUE;
                $cid = $line_item->quantity_component;
                if(is_numeric($cid) && is_numeric($submission->data[$cid][0]) && ($submission->data[$cid][0] > 0)){
                    $line_item->quantity = $submission->data[$cid][0];
                    $valid_quantity++;
                }
                elseif(is_null($submission->data[$cid][0])){
                    //setting quantity to 0, this is for hidden components
                    $line_item->quantity = 0;
                }
                elseif (is_numeric($cid) && is_numeric($submission->data[$cid][0]) && ($submission->data[$cid][0] == 0)){
                    $line_item->quantity = $submission->data[$cid][0];
                }
                else{
                    //setting error if quantity component is not numeric or null
                    form_set_error($component['form_key'], 'You must enter a valid quantity.');
                    $line_item->quantity = 0;
                }
            }elseif ( isset($line_item->quantity_source) && $line_item->quantity_source == 'fixed' && is_numeric($line_item->quantity) && $line_item->quantity > 0) {
              $valid_quantity++;
            }
       }
        if ($valid_quantity < 1 && $component_quantity) {
            form_set_error($component['form_key'], 'You must enter a valid quantity.');
        }
    }
  }
}

/**
 * Loads payment notes
 */
function scs_payment_webform_payment_notes_load($nid) {
    $node = node_load($nid);
    foreach ($node->webform['components'] as $key => $component) {
        if ($component['type'] == 'paymethod_select') {
            $notes = isset($node->webform['components'][$key]['extra']['payment_notes'])? $node->webform['components'][$key]['extra']['payment_notes'] :'';
            return $notes;
        }
    }
}

/**
 * @param $nid
 * @return array
 *
 * Loads numeric components available as the quantity component.
 */
function scs_payment_get_numeric_components($nid) {
    $node = node_load($nid);
    $components = array();
    foreach ($node->webform['components'] as $key => $component) {
        if ($component['type'] == 'number') {
            $components[$key]=$component['name'];
        }
    }
    return $components;
}

/**
 * Implements hook_ENTITY_TYPE_ACTION().
 * deleting tokens when payments are deleted
 */
function scs_payment_payment_delete($entity) {
    db_delete('scs_payment_token')
        ->condition('pid', $entity->pid)
        ->execute();
}

